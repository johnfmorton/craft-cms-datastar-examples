<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Search</title>
    <style>
        .bg-red-400 {
            background-color: rgb(248 113 113) /* #f87171 */;
        }

        .bg-yellow-400 {
            background-color: rgb(250 204 21) /* #facc15 */;
        }

        .whitespace-pre-line {
            white-space: pre-line;
        }
    </style>
</head>
<body>
<div>
    <h1>Datastar Test - v2: Adding url parameters</h1>
    {# Set the initial value of 'phrase' to the query parameter in the URL on page load. #}
    {% set phrase = craft.app.request.getQueryParam('phrase') ?? '' %}
    <div id="container" data-signals="{phrase: '{{ phrase }}', searchCounter: 0 }">
        <div>
            <div>
                <label for="phrase">Enter a phrase</label>
                <input type="text"
                       name="phrase"
                       id="phrase"
                       placeholder="What are you looking for?"
                       data-bind-phrase
                       data-on-input__debounce.200ms="{{ datastar.get('_datastar/search-v2.twig') }} && $searchCounter++;"
                       data-on-load="$phrase.length >= 1 && {{ datastar.get('_datastar/search-v2.twig') }} && $searchCounter++;"
                >
                <p>You've used the search <span data-text="$searchCounter"></span> time<span
                            data-show="$searchCounter !== 1">s</span>.</p>
                <pre>ctx.signals:</pre>
                <pre style="background-color: yellow" data-text="ctx.signals.JSON()"></pre>
            </div>

            <pre id="debugger" class="whitespace-pre-line bg-yellow-400">
                        debugging info will appear here from _datastar/search-v2.twig
            </pre>

            <div id="searchResults">
                <h2>Search results</h2>
                <ul>
                    <li>results from _datastar/search-v2.twig will appear here</li>
                </ul>
            </div>


        </div>
    </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchPhrase = document.querySelector('[data-bind-phrase]');
    // set focus on the search input
    searchPhrase.focus();

    searchPhrase.addEventListener('input', (e) => {
      console.log('searchPhrase', e.target.value);
    });

    window.addEventListener('popstate', (event) => {
      isPopstateEvent = true;

      // When the browser navigates back or forward,
      // the current URL already reflects the desired state
      // so we don't need to update the URL or the input field.
      const currentUrl = new URL(window.location.href);
      const searchPhraseValue = currentUrl.searchParams.get('phrase') || '';

      // Update the input field without triggering another pushState.
      searchPhrase.value = searchPhraseValue;

      searchPhrase.dispatchEvent(new Event('input', {bubbles: true}));
    });

  });
</script>
</body>
</html>
