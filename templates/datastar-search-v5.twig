<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Search</title>
    <style>
        .bg-red-400 {
            background-color: rgb(248 113 113) /* #f87171 */;
        }

        .bg-yellow {
            background-color: yellow;
        }

        .whitespace-pre-line {
            white-space: pre-line;
        }

        .text-blue {
            color: rgb(20, 97, 221) /* #1461dd */;
        }
    </style>
</head>
<body>
<div>
    <h1>Datastar Test - v5: Adding complexity with section choice</h1>

    {# Set the initial value of 'phrase' to the query parameter in the URL on page load. #}
    {% set phrase = craft.app.request.getQueryParam('phrase') ?? '' %}
    {% set sections = craft.app.request.getQueryParam('sections') ?? 0 %}

    {# Include the search form #}
    <div id="container"
         data-signals="{phrase: '{{ phrase }}', searchCounter: 0, browserHistoryCounter: 0, lastPhrase: '', sections: '{{ sections }}'}">
        <div id="wrapper"
             data-on-historychange="$phrase=evt.detail.phrase; $sections=evt.detail.sections; $browserHistoryCounter++;">
            <div>
                <fieldset>
                    <legend>Search Sections</legend>
                    {% set expression = '$phrase.trim().length && ' ~ datastar.get('_datastar/search-results-v5.twig', { updateHistory: true }) ~ ' && $searchCounter++; $lastPhrase = $phrase.trim()' %}
                    <div>
                        <label for="globalSearch">
                            <input id="globalSearch"
                                   data-on-change="{{expression}}"
                                   type="radio" data-bind-sections value="0">
                            <span data-class="{'text-blue': ($sections == '0')}">All sections</span>
                        </label>
                    </div>

                    <div>
                        <label for="blogPosts">
                            <input id="blogPosts"
                                   data-on-change="{{expression}}"
                                   type="radio" data-bind-sections value="1">
                            <span data-class="{'text-blue': ($sections == '1')}">Blog posts</span>
                        </label>
                    </div>

                    <div>
                        <label for="savedLinks">
                            <input id="savedLinks"
                                   data-on-change="{{expression}}"
                                   type="radio" data-bind-sections value="2">
                            <span data-class="{'text-blue': ($sections == '2')}">Saved links</span>
                        </label>
                    </div>
                </fieldset>
            </div>
            <div>
                <label for="phrase">Enter a phrase</label>
                <input type="text"
                       name="phrase"
                       id="phrase"
                       placeholder="What are you looking for?"
                       data-bind-phrase
                       data-on-input__debounce.200ms="($phrase.trim() !== $lastPhrase.trim()) && {{ datastar.get('_datastar/search-results-v5.twig', { updateHistory: true }) }} && $searchCounter++, $lastPhrase = $phrase.trim();"
                       data-on-load="$phrase.length >= 1 && {{ datastar.get('_datastar/search-results-v5.twig') }} && $searchCounter++; $lastPhrase = $phrase.trim();"
                       data-on-historychange__debounce.200ms="{{ datastar.get('_datastar/search-results-v5.twig', { updateHistory: false }) }}"
                >
                <p>You've used the search <span data-text="$searchCounter"></span> time<span
                            data-show="$searchCounter !== 1">s</span>.</p>
                <h2>ctx.signals:</h2>
                <pre class="whitespace-pre-line bg-yellow" data-text="ctx.signals.JSON()"></pre>
            </div>

            <h2>Debugger</h2>
            <pre id="debugger" class="whitespace-pre-line bg-yellow">
                        debugging info will appear here from _datastar/search-results-v5.twig
            </pre>

            <div id="searchResults">
                <h2>Search results</h2>
                <ul>
                    <li>results from _datastar/search-results-v5.twig will appear here</li>
                </ul>
            </div>

        </div>
    </div>

    <script>
      const wrapperElement = document.getElementById('wrapper');
      document.addEventListener('DOMContentLoaded', () => {
        const searchPhrase = document.querySelector('[data-bind-phrase]');

        // set focus on the search input
        searchPhrase.focus();
        searchPhrase.addEventListener('input', (e) => {
          console.log('searchPhrase', e.target.value);
        });

        window.addEventListener('popstate', (event) => {
          // When the browser navigates back or forward,
          // the current URL already reflects the desired state.
          const currentUrl = new URL(window.location.href);
          const searchPhraseValue = currentUrl.searchParams.get('phrase') || '';
          // Update the input field without triggering another pushState.
          searchPhrase.value = searchPhraseValue;
          const sections = currentUrl.searchParams.get('sections') || 0;

          // a new custom event that we can listen for
          const historyChangeEvent = new CustomEvent('historychange', {
            detail: {
              phrase: searchPhrase.value,
              sections: sections
            }
          }, false);

          // Dispatch the custom event twice
          // first, to change the state of value in DataStar
          wrapperElement.dispatchEvent(historyChangeEvent);
          // second, to trigger the search
          searchPhrase.dispatchEvent(historyChangeEvent);
        });

        // Listen for the history change event
        wrapperElement.addEventListener('historychange', (e) => {
          console.log('historychange event heard', e), false;
          // set focus on the search input
          searchPhrase.focus();
        });
      });
    </script>
</div>
</body>
</html>
